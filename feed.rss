<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>YoSwift!</title><description>Short tips, tricks and best practices for using Swift, SwiftUI and Combine.</description><link>https://yoswift.dev</link><language>en</language><lastBuildDate>Sun, 31 May 2020 11:38:41 +0200</lastBuildDate><pubDate>Sun, 31 May 2020 11:38:41 +0200</pubDate><ttl>250</ttl><atom:link href="https://yoswift.dev/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://yoswift.dev/swift/recursive_objects</guid><title>Recursive Objects</title><description>Value type cannot have a stored property that recursively contains it?</description><link>https://yoswift.dev/swift/recursive_objects</link><pubDate>Sat, 30 May 2020 03:48:00 +0200</pubDate><content:encoded><![CDATA[<h1>Recursive Objects</h1><p>Earlier we learnt about how we can <a href="https://yoswift.dev/swift/Tree%20in%20Swift/">implement a binary tree in Swift.</a> Remember we started with a Class and not a struct.</p><p>Let's try to understand the problem with using a struct. Try compiling the code below.</p><pre><code><span class="keyword">struct</span> Node {
    <span class="keyword">var</span> next: <span class="type">Node</span>
}
</code></pre><p>It will not compile and give you an error.</p><blockquote><p><strong>value type 'Node' cannot have a stored property that recursively contains it</strong></p></blockquote><p>The reason is, the compiler need to know the memory size of struct node so that it can allocate memory for variables / constants of this type in <a href="https://en.wikipedia.org/wiki/Stack-based_memory_allocation">Stack</a>. Now due to the recursive nature of the struct it means it is an infinite size and compiler cannot allow it.</p><p>Now, what do you think about the code below</p><pre><code><span class="keyword">struct</span> Node {
    <span class="keyword">var</span> next: [<span class="type">Node</span>]
}
</code></pre><p>Well, it compiles fine, which feels a bit weird to some, if you are confused by this go ahead and read the explanation below.</p><p>If you think about it <code>Array</code> in Swift is also a <em>value type</em> meaning compiler need to know the size of an Array in advance. But also the array need to hold <strong>variable</strong> number of elements which it cannot know in advance and hence it need to allocate memory for those elements in <a href="https://en.wikipedia.org/wiki/Memory_management">heap</a> and hold a reference (or pointer) to that memory.</p><p>The references are fixed size and so Array has a fixed size (size of a reference to actual array elements + other fixed size elements for book keeping and other implementation details.)</p><p>Now it is an Array's implementation detail that gives you value type semantic despite it containing a reference type. It does it <strong>lazily</strong> meaning copying only when required.</p><pre><code><span class="keyword">struct</span> Node {
    <span class="keyword">var</span> value: <span class="type">Int</span>
    <span class="keyword">var</span> kids: [<span class="type">Node</span>]
}

<span class="keyword">var</span> n1 = <span class="type">Node</span>(value: <span class="number">1</span>, kids: [ <span class="type">Node</span>(value: <span class="number">2</span>, kids: []) ])
<span class="keyword">var</span> n2 = n1
</code></pre><p>When we copy n1 to n2, we expect a <strong>new memory</strong> for kids array of n2 and all n1's array elements <strong>copied</strong> to it. This is because being a value type we expect a value type semantic from Array. Now to optimize unnecessary copy operations Array can actually delay this copy operation and hold until one of n1 or n2 try to mutate their kids array (e.g. remove or add a new element).</p><p>So far essentially it mean both reference inside n1 and n2 are actually pointing to the same memory location where the elements are stored.</p><pre><code>n2.<span class="property">kids</span>.<span class="call">append</span>(<span class="type">Node</span>(value: <span class="number">3</span>, kids: []))
</code></pre><p>Now at this point, Array implementation will actually allocate a new memory for holding kids of n2, add the new Node in that memory and change the reference inside n2 to point to this memory.</p><p>All these details are Array's internal implementation details but it is good to know what is going on inside to explain some concepts we get confused with while using an Array.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/combine/parallel-download-using-combine</guid><title>Multiple simultaneous network requests</title><description>Download multiple images using Combine</description><link>https://yoswift.dev/combine/parallel-download-using-combine</link><pubDate>Sat, 23 May 2020 01:25:00 +0200</pubDate><content:encoded><![CDATA[<h1>Multiple simultaneous network requests</h1><p>Today we will learn how to "combine" multiple publishers to create a new one. This has many use cases for example it can be used to download multiple images in parallel combining an existing Publisher which downloads an image from internet .</p><p>The sample App we will use to understand it, is a GridView of images where we want to download all images simultaneously before rendering</p><br /><img src="parallel-download-using-combine.gif "GridView"" alt="GridView"/><br /><br /><p>Let's set the stage first, we already have a method called <strong>fetchImage</strong> using <strong>URLSession's dataTaskPublisher</strong> to download an image from Internet. I am using this awesome site called <a href="https://picsum.photos/">Picsum Photos</a> to download a random picture from web of given size (in our example it is 80x80 points).</p><br /><pre><code><span class="keyword">private func</span> fetchImage() -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Image</span>, <span class="type">Never</span>&gt; {
        <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"https://picsum.photos/80"</span>)!
        <span class="keyword">return</span> <span class="type">URLSession</span>.<span class="property">shared</span>.<span class="call">dataTaskPublisher</span>(for: url)
            .<span class="call">map</span> {
                <span class="keyword">guard let</span> uiImage = <span class="type">UIImage</span>(data: $0.<span class="property">data</span>) <span class="keyword">else</span> {
                    <span class="keyword">return</span> <span class="type">Image</span>.<span class="property">default</span>
                }
                <span class="keyword">return</span> <span class="type">Image</span>(uiImage: uiImage)
        }
        .<span class="call">replaceError</span>(with: <span class="type">Image</span>.<span class="property">default</span>)
        .<span class="call">eraseToAnyPublisher</span>()
    }
<span class="keyword">extension</span> <span class="type">Image</span> {
    <span class="keyword">static var</span> `default` = <span class="type">Image</span>(systemName: <span class="string">"photo"</span>)
}
</code></pre><br /><p>Given this method, let's see how we can leverage this to achieve downloading multiple images in parallel. So without any delay let's see the code. All steps in the code are commented to explain what is going on.</p><br /><pre><code><span class="comment">// Download n images</span>
<span class="keyword">func</span> fetch(n: <span class="type">Int</span>) {
    <span class="comment">//Make an array of publishers</span> 
    <span class="keyword">let</span> arrayOfPublishers = (<span class="number">0</span>...n).<span class="call">map</span> { <span class="keyword">_ in</span>
        <span class="call">fetchImage</span>()
    }
    <span class="comment">//Create a publisher of a sequence</span>
    <span class="type">Publishers</span>.<span class="type">Sequence</span>(sequence: arrayOfPublishers)
        .<span class="dotAccess">flatMap</span>{ $0 } <span class="comment">//merges the output from all returned publishers into a single stream of Image.
  										//AnyPublisher&lt;Image, Never&gt; to Image</span>
        .<span class="call">collect</span>() <span class="comment">//collects all received items and returns them as an array upon completion.
                   //this is what collects all images and finishes when all are available</span> 
        .<span class="call">receive</span>(on: <span class="type">RunLoop</span>.<span class="property">main</span>) <span class="comment">// receive on main thread so that we can update our UI with images</span>
        .<span class="call">sink</span> { <span class="comment">//create a subscription, here the value we will receive is going to be [Image] 
            //we have all images $0, downloaded now</span> 
        }
        .<span class="call">store</span>(in: &amp;cancellableSet) <span class="comment">//so that we retain subscription</span>
}
</code></pre><p>The full code is available in this <a href="https://gist.github.com/manojkarki/75869a2bd7df5845f8d4c4fe70493a5d">Github gist</a></p><br /><p>If you have any questions, doubts or feedback <a href="https://yoswift.dev/about/about/">get in touch</a> and I would be happy to help.</p><br /><a href="https://twitter.com/intent/tweet?via=mskarki&amp;text=Download multiple images using Combine&amp;url=https%3A//yoswift.dev/combine/parallel-download-using-combine" rel="nofollow">Tweet this article</a>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/combine/advanced-swift-quiz</guid><title>Advanced Swift Quiz</title><description>Test your advanced Swift skills using Combine</description><link>https://yoswift.dev/combine/advanced-swift-quiz</link><pubDate>Sat, 16 May 2020 10:30:00 +0200</pubDate><content:encoded><![CDATA[<h1>Advanced Swift Quiz</h1><p>There are some Swift concepts which often surprise or confuse even very experienced programmers. Let's find out how good you are in understanding some of the advanced Swift skills by answering the quiz below using Combine.</p><p>Before starting if you want, take some time to read about <a href="https://developer.apple.com/documentation/combine/publisher">Publisher</a> and <a href="https://developer.apple.com/documentation/combine/just">Just</a> which are used in all problems you are about to see.</p><p>Now open a notebook to write down your answers and check in the end how many points you got and do not cheat 🤓</p><h2>Question 1</h2><pre><code><span class="comment">//Method 1</span>
<span class="keyword">func</span> patTtest() -&gt; <span class="type">Publisher</span> {
    <span class="type">Just</span>(<span class="number">9</span>)
}
</code></pre><p>Write down <strong>all</strong> the correct statements</p><ol><li>The code has "<em>missing return</em>" syntax error</li><li>The code has syntax error but not "<em>missing return</em>"</li><li>The code has no syntax error</li></ol><hr><h2>Question 2</h2><pre><code><span class="comment">//Method 2</span>
<span class="keyword">func</span> anyTest() -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt; {
    <span class="type">Just</span>(<span class="number">9</span>).<span class="call">eraseToAnyPublisher</span>()
}
<span class="keyword">let</span> p2 = <span class="call">anyTest</span>() <span class="comment">//line 1</span> 
p2.<span class="call">sink</span> { <span class="call">print</span>($0) } <span class="comment">//line 2</span>
<span class="keyword">let</span> p22: <span class="type">Just</span>&lt;<span class="type">Int</span>&gt; = <span class="call">anyTest</span>() <span class="comment">//line 3</span>
p22.<span class="call">sink</span> { <span class="call">print</span>($0) } <span class="comment">//line 4</span>
</code></pre><p>Write down <strong>all</strong> the correct statements</p><ol><li>The <strong>Line 1</strong> has syntax error</li><li>The <strong>Line 2</strong> has syntax error</li><li>The <strong>Line 3</strong> has syntax error</li><li>The method <code>anyTest</code> has syntax error</li><li><code>eraseToAnyPublisher</code> in method <code>anyTest</code> is not required.</li></ol><hr><h2>Question 3</h2><pre><code><span class="comment">//Method 3</span>
<span class="keyword">func</span> someTest() -&gt; <span class="keyword">some</span> <span class="type">Publisher</span> {
    <span class="type">Just</span>(<span class="number">9</span>)
}
<span class="keyword">let</span> p3 = <span class="call">someTest</span>() <span class="comment">//line 5</span>
p3.<span class="call">sink</span> { <span class="call">print</span>($0) } <span class="comment">//line 6</span>
<span class="keyword">let</span> p33: <span class="type">Just</span>&lt;<span class="type">Int</span>&gt; = <span class="call">someTest</span>() <span class="comment">//line 7</span>
</code></pre><p>Write down all the correct statements</p><ol><li>The method <code>someTest</code> has syntax error</li><li>Just can be a return type <code>some Publisher</code></li><li>The <strong>Line 5</strong> has syntax error</li><li>The <strong>Line 6</strong> has syntax error</li><li>The <strong>Line 7</strong> has syntax error</li><li>We can call <code>anyTest</code> of Q2 and <code>someTest</code> interchangeably.</li></ol><hr><h2>Question 4</h2><pre><code><span class="comment">//Method 4</span>
<span class="keyword">func</span> genericTest&lt;T: <span class="type">Publisher</span>&gt;() -&gt; <span class="type">T</span> <span class="keyword">where</span> <span class="type">T</span>.<span class="type">Output</span> == <span class="type">Int</span>, <span class="type">T</span>.<span class="type">Failure</span> == <span class="type">Never</span> {
    <span class="type">Just</span>(<span class="number">9</span>) <span class="keyword">as</span>! <span class="type">T</span>
}
<span class="keyword">let</span> p4 = <span class="call">genericTest</span>() <span class="comment">// line 8</span>
p4.<span class="call">sink</span> { <span class="call">print</span>($0) } <span class="comment">// line 9</span>

<span class="keyword">let</span> p44: <span class="type">Just</span>&lt;<span class="type">Int</span>&gt; = <span class="call">genericTest</span>() <span class="comment">// line 10</span>
p44.<span class="call">sink</span> { <span class="call">print</span>($0) } <span class="comment">// line 11</span>
</code></pre><p>Write down all the correct statements</p><ol><li>The method <code>genericTest</code> has syntax error</li><li><code>Just(9) as! T</code> the cast is not required</li><li><code>where T.Output == Int, T.Failure == Never</code> is incorrect syntax.</li><li>The <strong>Line 8</strong> has syntax error</li><li>The <strong>Line 10</strong> has syntax error</li><li>The <strong>Line 10</strong> is correct but <strong>line 11</strong> has syntax error</li><li>We can call <code>someTest</code> of Q3 and <code>genericTest</code> interchangeably.</li></ol><hr><h2>Check your Score</h2><details>
  <summary>Answer 1</summary>
  <br>
  <input type="checkbox" name="q1" value="q1" checked disabled>
  <label for="q1"> Only option 2 is correct</label>
  <h3>Hints</h3>
  <ul>
    <li>Publisher is a protocol with associatedtype (Output and Failure) so it cannot be used a a type.</li>
    <li><a href="https://docs.swift.org/swift-book/LanguageGuide/Generics.html">Read about protocols with Associated types</a></li>
  </ul>  
</details><br><br>

<details>
  <summary>Answer 2</summary>
  <br>
  <input type="checkbox" name="q2" value="q2" checked disabled>
  <label for="q2"> Only option 3 is correct.</label>
  <h3>Hints</h3>
  <ul>
    <li>The type of p22,  'Just&lt;Int&gt;' is not same as return type of method 'AnyPublisher&lt;Int, Never&gt;'</li>
    <li><a href="https://developer.apple.com/documentation/combine/anypublisher">Read about Publisher type</a></li>
    <li><a href="https://www.swiftbysundell.com/articles/different-flavors-of-type-erasure-in-swift/">Read about Any[Type] concept</a></li>
  </ul>
</details>

<br><br>

<details>
  <summary>Answer 3</summary>
  <br>
  <input type="checkbox" name="q3" value="q3" checked disabled>
  <label for="q3"> Option 4 and Option 5 are correct.</label>
  <h3>Hints</h3>
  <ul>
    <li>Check the type requirements for a subscriber to subscribe to a Publisher. The subscriber’s Input and Failure associated types must match the Output and Failure types declared by the publisher.</li>
    <li>'some Publisher' is not same as 'Just<Int>'</li>
    <li><a href="https://stackoverflow.com/questions/56433665/what-is-the-some-keyword-in-swiftui">Check out various answers in this SO post</a></li>
    <li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md">Proposal about opaque return types</a></li>
    <li><a href="https://www.donnywals.com/understanding-type-erasure-in-swift/">Donny Wals explaining "some" concepts here</a></li>    
  </ul>
  </details>

<br><br>

<details>
  <summary>Answer 4</summary>
  <br>
  <input type="checkbox" name="q4" value="q4" checked disabled>
  <label for="q4"> Only option 4 is correct.</label>
  <h3>Hints</h3>
  <ul>
    <li>Compiler cannot infer the Generic parameter 'T' unless you explicitly declare type of p4.</li>
    <li><a href="https://docs.swift.org/swift-book/LanguageGuide/Generics.html">Read about Generics</a></li>    
  </ul>
</details>

<br>
<h2>Reward yourself 25 points for each correct answer.</h2>
<h3>Don't be shy and <a href="https://twitter.com/intent/tweet?via=mskarki&amp;text=Yo!, my score in advanced Swift quiz is [ ]&amp;url=https%3A//yoswift.dev/combine/advanced-swift-quiz" rel="nofollow">share your score</h3></a>

]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/swift/Tree%20in%20Swift</guid><title>Tree in Swift</title><description>How to represent Tree data structure in Swift</description><link>https://yoswift.dev/swift/Tree%20in%20Swift</link><pubDate>Sun, 10 May 2020 11:32:00 +0200</pubDate><content:encoded><![CDATA[<h1>Tree in Swift</h1><p>Tree data structure is something I am sure every programmer has implemented at least once (though more for interviews than in job 😁). Nevertheless let's see how to represent a binary tree in Swift.</p><p>A <strong>binary tree</strong> is a specific form of tree data structure where each node has at most two children which are referred to as the <em>left child</em> and the <em>right child</em>. [<a href="https://en.wikipedia.org/wiki/Binary_tree">Ref</a>]</p><p>You probably figured out from the definition that left and right children are itself Trees, so let's start with a class which is a Ref type (with a value type like structure we cannot represent a Tree, which means an infinite size memory)</p><pre><code><span class="keyword">class</span> TreeClass&lt;T&gt; {
    <span class="keyword">var</span> data: <span class="type">T</span>
    <span class="keyword">var</span> left: <span class="type">TreeClass</span>&lt;<span class="type">T</span>&gt;?
    <span class="keyword">var</span> right: <span class="type">TreeClass</span>&lt;<span class="type">T</span>&gt;?

    <span class="keyword">init</span>(data: <span class="type">T</span>, left: <span class="type">TreeClass</span>&lt;<span class="type">T</span>&gt;?, right: <span class="type">TreeClass</span>&lt;<span class="type">T</span>&gt;?) {
        <span class="keyword">self</span>.<span class="property">data</span> = data
        <span class="keyword">self</span>.<span class="property">left</span> = left
        <span class="keyword">self</span>.<span class="property">right</span> = right
    }
}
</code></pre><p>Now represent a tree with root (3) left child (1) and right child (2)</p><pre><code><span class="keyword">let</span> tree11 = <span class="type">TreeC</span>(data: <span class="number">1</span>, left: <span class="keyword">nil</span>, right: <span class="keyword">nil</span>)
<span class="keyword">let</span> tree22 = <span class="type">TreeC</span>(data: <span class="number">2</span>, left: <span class="keyword">nil</span>, right: <span class="keyword">nil</span>)
<span class="keyword">let</span> tree33 = <span class="type">TreeC</span>(data: <span class="number">3</span>, left: tree11, right: tree22)
</code></pre><p>Let's write a <a href="https://en.wikipedia.org/wiki/Tree_traversal">preorder traversal</a> algorithm</p><pre><code><span class="keyword">func</span> preorder&lt;T&gt;(tree: <span class="type">TreeC</span>&lt;<span class="type">T</span>&gt;?) {
    <span class="keyword">guard let</span> t = tree <span class="keyword">else</span> {
        <span class="keyword">return</span>
    }
    <span class="call">print</span>(t.<span class="property">data</span>)
    <span class="call">preorder</span>(tree: t.<span class="property">left</span>)
    <span class="call">preorder</span>(tree: t.<span class="property">right</span>)
}
</code></pre><p>In Swift there is another (better) way to represent recursive data structures like Tree and that is called <em>Indirect enum</em></p><p>With it an enum case can refer to itself which essentially is possible as compiler internally make it like a reference type. (for normal enums which are value type, internally compiler treat them as C unions )</p><pre><code><span class="keyword">indirect enum</span> Tree&lt;T&gt; {
  <span class="keyword">case</span> <span class="type">Nil</span>
  <span class="keyword">case</span> <span class="type">Node</span>(value: <span class="type">T</span> ,left: <span class="type">Tree</span>&lt;<span class="type">T</span>&gt; ,right: <span class="type">Tree</span>&lt;<span class="type">T</span>&gt;)
}
</code></pre><p>Much better, right?</p><p>Same tree representation</p><pre><code><span class="keyword">let</span> tree1 = <span class="type">Tree</span>.<span class="type">Node</span>(value: <span class="number">1</span>, left: <span class="type">Tree</span>.<span class="type">Nil</span>, right: <span class="type">Tree</span>.<span class="type">Nil</span>)
<span class="keyword">let</span> tree2 = <span class="type">Tree</span>.<span class="type">Node</span>(value: <span class="number">2</span>, left: <span class="type">Tree</span>.<span class="type">Nil</span>, right: <span class="type">Tree</span>.<span class="type">Nil</span>)
<span class="keyword">let</span> tree3 = <span class="type">Tree</span>.<span class="type">Node</span>(value: <span class="number">3</span>, left: tree1, right: tree2)
</code></pre><p>And preorder algorithm</p><pre><code><span class="keyword">func</span> preorder&lt;T&gt;(tree:<span class="type">Tree</span>&lt;<span class="type">T</span>&gt;) {
    <span class="keyword">switch</span> tree {
    <span class="keyword">case</span> .<span class="dotAccess">Nil</span>:
        <span class="keyword">break</span>;
    <span class="keyword">case</span> .<span class="dotAccess">Node</span>(<span class="keyword">let</span> value, <span class="keyword">let</span> left, <span class="keyword">let</span> right):
        <span class="call">print</span>(value)
        <span class="call">preorder</span>(tree: left)
        <span class="call">preorder</span>(tree: right)
    }
}
</code></pre><p>Swift is evolving very fast and has so many features that sometime we miss to use the best feature available for a given problem.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/swiftui/swiftui-twitter-basics</guid><title>My Twitter SwiftUI collection</title><description>Some SwiftUI stuff I shared in 2019 using the beta release.</description><link>https://yoswift.dev/swiftui/swiftui-twitter-basics</link><pubDate>Tue, 5 May 2020 09:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>My Twitter SwiftUI collection</h1><p>SwiftUI completly changed the way developers used to create software for Apple platforms. Here are some tips I shared in 2019 on my Twitter when SwiftUI was in beta.<br><br><br /></p><ul><li>Learn about <a href="https://twitter.com/mskarki/status/1150477598281084929" target="_blank">SequenceGesture</a> and how to use it.</li></ul><ul><li>Do you like playing cards? Here is a nice <a href="https://twitter.com/mskarki/status/1150478984037261313" target="_blank">card deck animation</a>.</li></ul><ul><li>A <a href="https://twitter.com/mskarki/status/1150479713418305536" target="_blank">flip animation</a> using ZStack. Now imagine doing it in UIKit 😀</li></ul><ul><li>Who have not seen a hamburger button, here is an <a href="https://twitter.com/mskarki/status/1151210494759489536" target="_blank">animating one</a>.</li></ul><ul><li>And the <a href="https://twitter.com/mskarki/status/1151210579010478081" target="_blank">side menu</a>.</li></ul><ul><li>This <a href="https://twitter.com/mskarki/status/1151220584921128961" target="_blank">stack of images</a>, a fun way to browse items.</li></ul><ul><li>What is <a href="https://twitter.com/mskarki/status/1151544806885199872" target="_blank">Color.red</a>, yes like almost everything it is also a View in SwiftUI.</li></ul><ul><li>Isn't UIActivityIndicatorView is boring? How about these <a href="https://twitter.com/mskarki/status/1151980365743034370" target="_blank">spinners</a>.</li></ul><ul><li>And finally <a href="https://twitter.com/mskarki/status/1152304358563954688" target="_blank">what are ViewModifiers and why their order is important</a>?</li></ul><br /><p>Follow me on <a href="https://twitter.com/mskarki" target="_blank">Twitter</a> for short tips like these</p>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/swiftui/statusbar-style</guid><title>SwiftUI View and status bar style</title><description>How to change status bar style for each SwiftUI screen or View</description><link>https://yoswift.dev/swiftui/statusbar-style</link><pubDate>Sun, 3 May 2020 15:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>SwiftUI View and status bar style</h1><p>In UIKit we can override preferredStatusBarStyle to change the status bar style.</p><br /><pre><code><span class="keyword">class</span> MyViewController: <span class="type">UIViewController</span> {
    <span class="keyword">override var</span> preferredStatusBarStyle: <span class="type">UIStatusBarStyle</span> {
        <span class="keyword">return</span> .<span class="dotAccess">lightContent</span>
    }
}
</code></pre><br /><p>Now when you push another SwiftUI View to NavigationView, there is no way to change the status bar style for the screen you are pushing.</p><br /><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">HStack</span> {
        <span class="type">NavigationLink</span>(destination: <span class="type">AnotherScreenView</span>()) {
            <span class="type">Text</span>(<span class="string">"Push another screen"</span>)                
        }        
    }
}
</code></pre><br /><p>A small trick is to always create a new instance of UIHostingController and change statusbar as required.</p><br /><br /><p>First create a subclass of UIHostingController that takes statusBarStyle.</p><br /><pre><code><span class="keyword">class</span> HostingController: <span class="type">UIHostingController</span>&lt;<span class="type">AnyView</span>&gt; {

    <span class="keyword">var</span> statusBarStyle: <span class="type">UIStatusBarStyle</span>

    <span class="keyword">init</span>(rootView: <span class="type">AnyView</span>, statusBarStyle : <span class="type">UIStatusBarStyle</span> = .<span class="dotAccess">lightContent</span>) {
        <span class="keyword">self</span>.<span class="property">statusBarStyle</span> = statusBarStyle
        <span class="keyword">super</span>.<span class="keyword">init</span>(rootView: rootView)
    }

    <span class="keyword">override var</span> preferredStatusBarStyle: <span class="type">UIStatusBarStyle</span> {
        statusBarStyle
    }
}
</code></pre><br /><p>A small router that holds the UINavigationController, and injected to view hierarchy as an environment object of root view. The only method is push taking a root view and statusBarStyle.</p><br /><pre><code><span class="keyword">class</span> Router: <span class="type">ObservableObject</span> {
    <span class="keyword">let</span> navigationController: <span class="type">UINavigationController</span>
    
    <span class="keyword">init</span>(navigationController: <span class="type">UINavigationController</span>) {
        <span class="keyword">self</span>.<span class="property">navigationController</span> = navigationController
    }
    
    <span class="keyword">func</span> push(<span class="keyword">_</span> view: <span class="type">AnyView</span>, statusBarStyle : <span class="type">UIStatusBarStyle</span> = .<span class="dotAccess">lightContent</span>) {
        <span class="keyword">let</span> hostingController =  <span class="type">HostingController</span>(rootView: view, statusBarStyle: statusBarStyle:)
        <span class="keyword">self</span>.<span class="property">navigationController</span>.<span class="call">pushViewController</span>(hostingController, animated: <span class="keyword">true</span>)
    }
}

</code></pre><br /><p>Make a small replacement for SwiftUI's NavigationLink.</p><br /><pre><code><span class="keyword">struct</span> MyNavigationLink&lt;Destination: <span class="type">View</span>, Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
    <span class="keyword">@EnvironmentObject 
    var</span> router: <span class="type">Router</span>
    <span class="keyword">let</span> destination: <span class="type">Destination</span>

    <span class="keyword">let</span> viewBuilder: () -&gt; <span class="type">Content</span>
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Button</span>(action: {        
        <span class="keyword">self</span>.<span class="property">router</span>.<span class="call">push</span>(<span class="type">AnyView</span>(<span class="keyword">self</span>.<span class="property">destination</span>), statusBarStyle: .<span class="dotAccess">lightContent</span>)
        }) {
            <span class="call">viewBuilder</span>()
        }
    }
}
</code></pre><br /><p>Now usage is simple</p><br /><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">HStack</span> {
    <span class="type">MyNavigationLink</span>(destination: <span class="type">AnotherScreenView</span>(), statusBarStyle: .<span class="dotAccess">darkContent</span>) {
            <span class="type">Text</span>(<span class="string">"Push another screen"</span>)                
        }        
    }
}
</code></pre><br />]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/swiftui/swiftui-conditional-view</guid><title>Conditionally render a different View</title><description>How to conditionally render a different View</description><link>https://yoswift.dev/swiftui/swiftui-conditional-view</link><pubDate>Sun, 3 May 2020 12:35:00 +0200</pubDate><content:encoded><![CDATA[<h1>Conditionally render a different View</h1><p>Well, most of the SwiftUI beginner do try this which compiler won't compile</p><br /><pre><code><span class="keyword">func</span> textOrImage(<span class="keyword">_</span> text: <span class="type">Bool</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    text ? <span class="type">Text</span>(<span class="string">"Hello"</span>) : <span class="type">Image</span>(systemName: <span class="string">"headphones"</span>)
}
</code></pre><br /><p>If you don't understand why, read about <a href="https://docs.swift.org/swift-book/LanguageGuide/OpaqueTypes.html"><code></code><code>some</code><code></code></a> keyword,</p><p>in short it is a shorthand to avoid writing long generic types but still compiler will check that function returns the same concrete type from all return paths.</p><br /><p>Also don't even try to do this</p><pre><code><span class="keyword">func</span> textOrImage(<span class="keyword">_</span> text: <span class="type">Bool</span>) -&gt; <span class="type">Group</span> {
    text ? <span class="type">Group</span> { <span class="type">Text</span>(<span class="string">"Hello"</span>) } : <span class="type">Group</span> { <span class="type">Image</span>(systemName: <span class="string">"headphones"</span>) }
}
</code></pre><br /><p>Group is a generic so a concrete type is <code></code><code>Group&lt;Text&gt;</code><code></code> or <code></code><code>Group&lt;Image&gt;</code><code></code>, but you can't return both.</p><br /><p>Type erased view <a href="https://developer.apple.com/documentation/swiftui/anyview">AnyView</a> can be used here.</p><pre><code><span class="keyword">func</span> textOrImage(<span class="keyword">_</span> text: <span class="type">Bool</span>) -&gt; <span class="type">AnyView</span> {
    text ? <span class="type">AnyView</span>(<span class="type">Text</span>(<span class="string">"Hello"</span>)) : <span class="type">AnyView</span>(<span class="type">Image</span>(systemName: <span class="string">"headphones"</span>))
}
</code></pre><br /><p>But important to note this from the documentation.</p><p><em>"Whenever the type of view used with an AnyView changes, the old hierarchy is destroyed and a new hierarchy is created for the new type."</em></p><br /><p>One implication of this is that, as SwiftUI system need to discard the whole view hierarchy, in some case it mess with the animation (more on it later).</p><br /><p>Another way is to do something like this</p><pre><code><span class="keyword">func</span> textOrNil(<span class="keyword">_</span> text: <span class="type">Bool</span>) -&gt; <span class="type">Text</span>? {
    <span class="keyword">guard</span> text <span class="keyword">else</span> { <span class="keyword">return nil</span> }
    <span class="keyword">return</span> <span class="type">Text</span>(<span class="string">"Hello"</span>)
}

<span class="keyword">func</span> imageOrNil(<span class="keyword">_</span> text: <span class="type">Bool</span>) -&gt; <span class="type">Image</span>? {
    <span class="keyword">guard</span> text <span class="keyword">else</span> { <span class="keyword">return</span> <span class="type">Image</span>(systemName: <span class="string">"headphones"</span>) }
    <span class="keyword">return nil</span>
}
</code></pre><br /><p>It is perfectly fine to then use these methods like below</p><pre><code><span class="keyword">var</span> isText: <span class="type">Bool
VStack</span> {
    <span class="call">textOrNil</span>(isText)
    <span class="call">imageOrNil</span>(isText)
}

<span class="comment">//which is same as writing</span>
<span class="type">VStack</span> {
    <span class="type">ViewBuilder</span>.<span class="call">buildIf</span>(<span class="call">textOrNil</span>(isText))
    <span class="type">ViewBuilder</span>.<span class="call">buildIf</span>(<span class="call">imageOrNil</span>(isText))
}

</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/combine/keyboard-height</guid><title>Keyboard handling using combine</title><description>Reactive way to handle keyboard height change</description><link>https://yoswift.dev/combine/keyboard-height</link><pubDate>Sat, 2 May 2020 12:35:00 +0200</pubDate><content:encoded><![CDATA[<h1>Keyboard handling using combine</h1><pre><code><span class="keyword">static var</span> keyboardHeightPublisher: <span class="type">AnyPublisher</span>&lt;<span class="type">CGFloat</span>, <span class="type">Never</span>&gt; {
    <span class="keyword">let</span> willShow = <span class="type">NotificationCenter</span>.<span class="property">default</span>.<span class="call">publisher</span>(for: <span class="type">UIApplication</span>.<span class="property">keyboardWillShowNotification</span>)
        .<span class="call">map</span> { $0.(userInfo?[<span class="type">UIResponder</span>.<span class="property">keyboardFrameEndUserInfoKey</span>] <span class="keyword">as</span>? <span class="type">CGRect</span>)?.<span class="property">height</span> ?? <span class="number">0</span> }

    <span class="keyword">let</span> willHide = <span class="type">NotificationCenter</span>.<span class="property">default</span>.<span class="call">publisher</span>(for: <span class="type">UIApplication</span>.<span class="property">keyboardWillHideNotification</span>)
        .<span class="call">map</span> { <span class="keyword">_ in</span> <span class="type">CGFloat</span>(<span class="number">0</span>) }

    <span class="keyword">return</span> <span class="type">MergeMany</span>(willShow, willHide)
        .<span class="call">eraseToAnyPublisher</span>()
}
</code></pre><p>Now you can subscribe easily to keyboard height changes.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    
    <span class="keyword">@State 
    private var</span> value: <span class="type">String</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">TextField</span>(<span class="string">"Enter the value"</span>, text: $value)
            .<span class="call">onReceive</span>(keyboardHeightPublisher) { keyboardHeight <span class="keyword">in
                if</span> keyboardHeight &gt; <span class="number">0</span> {
                    <span class="call">print</span>(<span class="string">"Move something up"</span>)
                }
            }
    }
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/swiftui/swiftui-with-uilabel</guid><title>Using UILabel in SwiftUI</title><description>How to use a multiline UILabel in SwiftUI.</description><link>https://yoswift.dev/swiftui/swiftui-with-uilabel</link><pubDate>Sat, 2 May 2020 12:35:00 +0200</pubDate><content:encoded><![CDATA[<h1>Using UILabel in SwiftUI</h1><p>But why 😀 well sometime using SwiftUI in an existing App force you to do so.</p><p>So here is a SwiftUI View using <code></code><code>Text</code><code></code></p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">Text</span>(<span class="string">"This is a SwiftUI text which is easy to use but you need to understand the SwiftUI layout engine."</span>)
                .<span class="call">background</span>(<span class="type">Color</span>.<span class="property">black</span>)
                .<span class="call">foregroundColor</span>(<span class="type">Color</span>.<span class="property">white</span>)
        }
        .<span class="call">frame</span>(width: <span class="number">200</span>)
    }
}
</code></pre><p>Because <code></code><code>Text</code><code></code> has no frame, it gets it width from the parent which is a VStack and you see a nice multiline text constrained</p><p>by width of the parent 200 pts.</p><br /><img src="swiftui-with-uilabel-1.png "Multiline Text in SwiftUI"" alt="Multiline Text in SwiftUI"/><br /><br /><p>To use UILabel and produce the similar output this is what we need.</p><pre><code><span class="keyword">struct</span> SUILabel: <span class="type">UIViewRepresentable</span> {

    <span class="keyword">private(set) var</span> preferredMaxLayoutWidth: <span class="type">CGFloat</span> = <span class="number">0</span>
    <span class="keyword">func</span> makeUIView(context: <span class="type">UIViewRepresentableContext</span>&lt;<span class="type">SUILabel</span>&gt;) -&gt; <span class="type">UILabel</span> {
        <span class="keyword">let</span> label = <span class="type">UILabel</span>()
        label.<span class="property">text</span> = <span class="string">"""
        This is UILabel, one of the most interesting View class in UIKit. 
        With autolayout and multiline and it often give you some surprises. 
        Now using it with SwiftUI = 🤯
        """</span>
        label.<span class="property">numberOfLines</span> = <span class="number">0</span>
        label.<span class="property">preferredMaxLayoutWidth</span> = preferredMaxLayoutWidth
        label.<span class="property">backgroundColor</span> = <span class="type">UIColor</span>.<span class="property">black</span>
        label.<span class="property">textColor</span> = <span class="type">UIColor</span>.<span class="property">white</span>
        <span class="keyword">return</span> label
    }

    <span class="keyword">func</span> updateUIView(<span class="keyword">_</span> uiView: <span class="type">UILabel</span>, context: <span class="type">UIViewRepresentableContext</span>&lt;<span class="type">SUILabel</span>&gt;) { }
}
</code></pre><p>Using SUILabel in SwiftUI view</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">GeometryReader</span> { geometry <span class="keyword">in</span>
                <span class="type">SUILabel</span>(preferredMaxLayoutWidth: geometry.<span class="property">size</span>.<span class="property">width</span>)
                .<span class="call">fixedSize</span>(horizontal: <span class="keyword">true</span>, vertical: <span class="keyword">true</span>)
            }
        }
        .<span class="call">frame</span>(width: <span class="number">200</span>)
    }
}
</code></pre><p>The important things to note are, the use of <a href="https://developer.apple.com/documentation/uikit/uilabel/1620534-preferredmaxlayoutwidth"><strong>preferredMaxLayoutWidth</strong></a> onUILabel, <a href="https://developer.apple.com/documentation/swiftui/geometryreader"><strong>GeometryReader</strong></a> to fed it to SUILabel and using <a href="https://developer.apple.com/documentation/swiftui/group/3284808-fixedsize"><strong>fixedSize</strong></a> on SUILabel to force SwiftUIlayout engine to use the original size ( in UIKit words, <a href="https://developer.apple.com/documentation/uikit/uiview/1622600-intrinsiccontentsize">intrinsic content size</a>)</p>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/swift/readonly-property</guid><title>Readonly properties</title><description>Readonly properties with auto- synthesized intializers.</description><link>https://yoswift.dev/swift/readonly-property</link><pubDate>Sat, 2 May 2020 12:35:00 +0200</pubDate><content:encoded><![CDATA[<h1>Readonly properties</h1><p>In a struct you can mark a property readonly like</p><pre><code><span class="keyword">struct</span> Example1 {
    <span class="keyword">private(set) var</span> value: <span class="type">Int</span>
}
</code></pre><p>This is another way of marking a property readonly</p><pre><code><span class="keyword">struct</span> Example2 {
    <span class="keyword">let</span> value: <span class="type">Int</span>
}
</code></pre><p>There is an important difference though, the below code will compile just fine</p><pre><code><span class="keyword">var</span> example1 = <span class="type">Example</span>(value: <span class="number">10</span>)
example1.<span class="property">value</span> = <span class="number">20</span>
</code></pre><p>while below code will not compile with <span style="color:red"> error: cannot assign to property: 'value' is a 'let' constant </span></p><pre><code><span class="keyword">var</span> example2 = <span class="type">Example2</span>(value: <span class="number">10</span>)
example2.<span class="property">value</span> = <span class="number">20</span>
</code></pre><p>and by using private(set) you can provide a default value to your property, and initializer can be called</p><p>with or without an argument.</p>]]></content:encoded></item></channel></rss>