<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>YoSwift!</title><description>Short tips, tricks and best practices for using Swift, SwiftUI and Combine.</description><link>https://yoswift.dev</link><language>en</language><lastBuildDate>Wed, 22 Jul 2020 07:15:48 +0200</lastBuildDate><pubDate>Wed, 22 Jul 2020 07:15:48 +0200</pubDate><ttl>250</ttl><atom:link href="https://yoswift.dev/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://yoswift.dev/swiftui/dependency-injection-swiftui-2</guid><title>Declarative dependency injection in SwiftUI - 2</title><description>Declarative dependency injection in SwiftUI - 2</description><link>https://yoswift.dev/swiftui/dependency-injection-swiftui-2</link><pubDate>Tue, 21 Jul 2020 10:05:00 +0200</pubDate><content:encoded><![CDATA[<h1>Declarative dependency injection in SwiftUI - 2</h1><p><a href="https://yoswift.dev/swiftui/dependency-injection-swiftui-1/">Start with part one of this post</a></p><p>In the first part we discussed how SwiftUI declarative syntax made Dependency Injection <strong>DI</strong> a bit magical and tried to understand the magic. Now let's see how to receive the injected values in your Views and also how to inject your custom types into your View hierarchy.</p><br /><p>To read the value from the EnvironmentValues injected by the parent you need to use a property wrapper called <a href="https://developer.apple.com/documentation/swiftui/environment">Environment</a></p><p>Just pass the <strong>KeyPath&lt;EnvironmentValues, Value&gt;</strong> of property in the Environment property wrapper's initializer that you want to use in your view. You can ignore writing the type (Font? In this example) as it is inferred from the key path in initializer.</p><br /><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
  <span class="keyword">@Environment</span>(\.<span class="property">font</span>) <span class="keyword">var</span> font
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Text</span>(<span class="string">"Hello world"</span>)
            **.<span class="call">font</span>(font)**
    }
}
</code></pre><br /><p>Easy right? Now lets see how you can inject your custom dependencies, things that are not available in <strong>EnvironmentValues</strong></p><p>Let's say you have this struct below that you created in your root view and want to make it available to all views in the tree rooted at root view (without obviously passing through initializer of all views)</p><br /><pre><code><span class="keyword">struct</span> MyDependency {
  <span class="keyword">var</span> i = <span class="number">10</span>
}
</code></pre><br /><p>All the <strong>EnvironmentValues</strong> of a view hierarchy are stored by a type represented by <a href="https://developer.apple.com/documentation/swiftui/environmentkey">EnvironmentKey</a>, which is a protocol with just one requirement which is to <em>provide a default value of your dependency</em>. This is so that SwiftUI can use the default value if nothing is injected from any of the view above the view using it. If you don't have a reasonable default you can always use nil (and make the type as an Optional).</p><p>So let's create a key for our dependency MyDependency</p><br /><pre><code><span class="keyword">struct</span> MyDependencyKey: <span class="type">EnvironmentKey</span> {
  <span class="keyword">static var</span> defaultValue: <span class="type">MyDependency</span> = <span class="type">MyDependency</span>()
}
</code></pre><p>Now we need to extend <strong>EnvironmentValues</strong> to add a computed property to access our dependency.</p><br /><pre><code><span class="keyword">extension</span> <span class="type">EnvironmentValues</span> {
    <span class="keyword">var</span> myDependency: <span class="type">MyDependency</span> {
        <span class="keyword">get</span> {
            <span class="keyword">self</span>[<span class="type">MyDependencyKey</span>.<span class="keyword">self</span>]
        }
        <span class="keyword">set</span> {
            <span class="keyword">self</span>[<span class="type">MyDependencyKey</span>.<span class="keyword">self</span>] = newValue
        }
    }
}
</code></pre><p>The subscript syntax above is possible because of custom subscript implementation in <strong>EnvironmentValues</strong></p><pre><code><span class="keyword">subscript</span>&lt;K&gt;(key: <span class="type">K</span>.<span class="type">Type</span>) -&gt; <span class="type">K</span>.<span class="type">Value</span> <span class="keyword">where</span> <span class="type">K</span> : <span class="type">EnvironmentKey</span>
</code></pre><br /><p>Now injecting dependency is as easy as how we injected font earlier.</p><br /><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">YourCustomView</span>()
        }
        **.<span class="call">environment</span>(\<span class="type">EnvironmentValues</span>.<span class="property">myDependency</span>, <span class="type">MyDependency</span>(i: <span class="number">100</span>))**
    }
}
</code></pre><br /><p>If you want you can also add some syntactic sugar over it</p><br /><pre><code><span class="keyword">extension</span> <span class="type">View</span> {
    <span class="keyword">func</span> inject(<span class="keyword">_</span> myDependency: <span class="type">MyDependency</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
        <span class="call">environment</span>(\.<span class="property">myDependency</span>, myDependency)
    }
}
</code></pre><br /><p>And now usage will be a little more fancier</p><br /><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">YourCustomView</span>()
        }
        .<span class="call">inject</span>(<span class="type">MyDependency</span>(i: <span class="number">100</span>))
    }
}
</code></pre><br /><p>That is all.</p><br /><a href="https://twitter.com/intent/tweet?via=mskarki&amp;text=Dependency Injection in SwiftUI [ ]&amp;url=https%3A//yoswift.dev/swiftui/dependency-injection-swiftui-2/" rel="nofollow">If you liked this article share this with others</a>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/swiftui/dependency-injection-swiftui-1</guid><title>Declarative dependency injection in SwiftUI - 1</title><description>Declarative dependency Injection in SwiftUI - 1</description><link>https://yoswift.dev/swiftui/dependency-injection-swiftui-1</link><pubDate>Mon, 20 Jul 2020 10:05:00 +0200</pubDate><content:encoded><![CDATA[<h1>Declarative dependency injection in SwiftUI - 1</h1><p>Dependency Injection (<strong>DI</strong>) is such a heavy word for a concept we all do all the time unknowingly 😎 It is simply passing "dependencies" of an object via initializer or properties or also via methods.</p><blockquote><p>In software engineering, <em>dependency injection</em> is a technique in which an object receives other objects that it depends on.</p></blockquote><p>SwiftUI declarative syntax made <strong>DI</strong> a bit non-obvious for beginners, this article (and the part 2 of it) will explain a way of <strong>DI</strong> in SwiftUI and hopefully you won't find it unusual after reading these.</p><br /><p>Check the below code snippet.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Text</span>(<span class="string">"Hello world"</span>)
            .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
    }
}
</code></pre><br /><p>There is nothing interesting going on here, we created a Text object and calling a SwiftUI method available on Text to change the font.</p><pre><code>  <span class="keyword">func</span> font(<span class="keyword">_</span> font: <span class="type">Font</span>?) -&gt; <span class="type">Text</span>
</code></pre><br /><p>Let's add a default padding around Text</p><br /><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Text</span>(<span class="string">"Hello world"</span>)
            **.<span class="call">padding</span>()**
            .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
    }
}
</code></pre><br /><p>What has changed, well nothing much you might say but a lot. We now have <strong>DI</strong> in picture 🤯</p><p>Note the following points here</p><ol><li>We now no longer calling the <strong>font</strong> method on <strong>Text</strong> object but on return type of <strong>padding()</strong> method</li><li><strong>padding</strong> a method on View returns another View of type <strong>SwiftUI.ModifiedContent&lt;SwiftUI.Text, SwiftUI._PaddingLayout&gt;</strong> so if you know about opaque return type (<a href="https://yoswift.dev/combine/advanced-swift-quiz/">if not check Answer 3 here</a>) we can also say return value is <strong>some View</strong></li><li>Setting font on non-text View like padding type make no sense but still font will get applied magically to <strong>Text</strong> inside that View.</li></ol><br /><p>Let's write above code in a non-declarative way (i.e. Imperative) to understand better what is going on here.</p><pre><code><span class="keyword">struct</span> ContentViewImp: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="keyword">let</span> text = <span class="type">Text</span>(<span class="string">"Hello world"</span>)
        <span class="keyword">let</span> someView1 = text.<span class="call">padding</span>()
      	<span class="keyword">let</span> fontDependency = <span class="type">Font</span>.<span class="property">largeText</span>
        <span class="keyword">let</span> someView2 = someView1.<span class="call">font</span>(fontDependency)
        <span class="keyword">return</span> someView2
    }
} 
</code></pre><br /><p>The text is a child of someView1 and the font method called on someView1 is actually where you are passing/injecting the dependency Font to someView1. All Views are implicitly provided with many dependencies (called Environment Values) by SwiftUI and all those values make a View's Environment.</p><br /><p>The call font on someView1 is actually just changing the default environment value of Font to Font.largeText in its environment. This overridden Font value will then be available (injected) to all child views <strong>no matter how deep they are</strong> in the view tree. This is the reason text shows up using largeText as it is reading the font from the environment (injected by parent someView1).</p><br /><p>In fact the font method on View is just a syntactic sugar for setting font on environment. So the code below is equivalent</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Text</span>(<span class="string">"Hello world"</span>)
            .<span class="call">padding</span>()
            **.<span class="call">environment</span>(\<span class="type">EnvironmentValues</span>.<span class="property">font</span>, .<span class="dotAccess">caption</span>)**
    }
}
</code></pre><br /><p>The environment declaration is like this</p><pre><code><span class="keyword">func</span> environment&lt;V&gt;(<span class="keyword">_</span> keyPath: <span class="type">WritableKeyPath</span>&lt;<span class="type">EnvironmentValues</span>, <span class="type">V</span>&gt;, <span class="keyword">_</span> value: <span class="type">V</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span>
</code></pre><p>It takes a keypath <strong>WritableKeyPath&lt;EnvironmentValues, V&gt;</strong> to change a value in environment of a particular view hierarchy. In this case we are injecting font value to <a href="https://developer.apple.com/documentation/swiftui/environmentvalues/font">one of the property of EnvironmentValues called font</a></p><p>Now you understand that when we apply font to a container like VStack we are just setting the value of font property of EnvironmentValues of VStack and all child views of VStack get the new Font value implicitly from the environment.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">Text</span>(<span class="string">"Hello world"</span>)
        }
        .<span class="call">font</span>(<span class="type">Font</span>.<span class="property">largeTitle</span>)
    }
}
</code></pre><p>Check <a href="https://developer.apple.com/documentation/swiftui/environmentvalues">EnvironmentValues</a> and you will see that there are many useful properties that get implicitly be available to <strong>all subviews</strong> via Environment. You can override (inject) any of these for a view hierarchy as we did above for font.</p><p>This is how we inject a dependency via <strong>environment</strong> method. We haven't seen yet how the injected value is being received by the child views. Above examples you can't see as the consumer View is Text View part of SwiftUI framework.</p><p><a href="https://yoswift.dev/swiftui/dependency-injection-swiftui-2/">In the second part</a> we will dig deeper into how to receive the injected dependency in the subviews and also how to inject our own custom dependencies to a view hierarchy.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/swiftui/Xcode12_beta1</guid><title>Playing around with Xcode 12 Beta1</title><description>Xcode 12 Beta1 and SwiftUI.</description><link>https://yoswift.dev/swiftui/Xcode12_beta1</link><pubDate>Sat, 4 Jul 2020 12:35:00 +0200</pubDate><content:encoded><![CDATA[<h1>Playing around with Xcode 12 Beta1</h1><p>After creating <a href="https://apps.apple.com/us/app/ludo-a-strategy-board-game/id1518309340">Ludo</a> I started working on another game and this time using new Xcode 12 features. Developing using Beta is always hard as you cannot be sure if any bug you encounter is a bug in the Beta frameworks or you are missing something. I encountered two problem and these almost wasted all of my time today 😔</p><ol><li><strong>LazyVGrid</strong></li></ol><p><a href="https://gist.github.com/manojkarki/3fef7c309e21e928604ae6694798cba2">Try this gist</a> on Xcode beta 1 and scrolling vertically will freeze the App with 99% CPU usage. Change the VGridItem to Text from Button and still better. For now I switched to custom Grid but hopefully before the public release will be able to use the LazyVGrid.</p><ol start="2"><li><strong>Taps going to buttons in ScrollView</strong></li></ol><p><a href="https://gist.github.com/manojkarki/56e0a30e0dafb565055b906e169ddf90">Check out this gist</a>, so I changed to custom Grid and encountered this problem. The button at top is not getting touch events after I scroll vertically. The touches in infact are going to the buttons inside ScrollView which I realized very late as the buttons are not even visible on screen. I cannot say for sure if it is a bug but thankfully was able to solve by changing the zIndex of top button to 1.</p><pre><code>  <span class="type">Button</span> {
            <span class="keyword">self</span>.<span class="property">tapMeCount</span> += <span class="number">1</span>
        } label: {
            <span class="type">Text</span>(<span class="string">"Tap Me"</span>)
                .<span class="call">padding</span>(<span class="number">10</span>)
        }
        .<span class="call">zIndex</span>(<span class="number">1</span>)
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/swiftui/pinnedScrollableViews</guid><title>Use PinnedScrollableViews to make sticky headers</title><description>PinnedScrollableViews</description><link>https://yoswift.dev/swiftui/pinnedScrollableViews</link><pubDate>Wed, 24 Jun 2020 10:05:00 +0200</pubDate><content:encoded><![CDATA[<h1>Use PinnedScrollableViews to make sticky headers</h1><p>So today is WWDC-20 day 3 and already a ton of useful APIs added in SwiftUI. The biggest in my opinion being new App protocol (<em>A type that represents the structure and behavior of an app</em>.) This enabled pure SwiftUI App without need of importing UIKit. Apple also introduced many SwiftUI replacement Views for traditional UIKit Views. Availability of newly introduced APIs like <strong>Lazy Grids, ScrollViewReader, MapView, ProgressView</strong> etc which allows users to be less dependent on UIKit.</p><br /><p>This is big as I guess it is the beginning of very gradual UIKit deprecation and goes with strategy of Apple unifying all platforms. They want UX consistency across iPadOS, iOS, WatchOS, tvOS and macOS and without a common set of developer tools it is not feasible. I think SwiftUI is part of that game.</p><br /><p>Anyway let's see today how in SwiftUI we can implement sticky headers inside a scrollview using a newly introduced type called <strong>PinnedScrollableViews</strong>.</p><br /><pre><code><span class="keyword">struct</span> StickyHeaderViewExample: <span class="type">View</span> {

    <span class="keyword">var</span> stickyHeaderView: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">RoundedRectangle</span>(cornerRadius: <span class="number">25.0</span>, style: .<span class="dotAccess">continuous</span>)
            .<span class="call">fill</span>(<span class="type">Color</span>.<span class="property">gray</span>)
            .<span class="call">frame</span>(maxWidth: .<span class="dotAccess">infinity</span>)
            .<span class="call">frame</span>(height: <span class="number">64</span>)
            .<span class="call">overlay</span>(
                <span class="type">Text</span>(<span class="string">"Section"</span>)
                    .<span class="call">foregroundColor</span>(<span class="type">Color</span>.<span class="property">white</span>)
                    .<span class="call">font</span>(.<span class="dotAccess">largeTitle</span>)
            )
    }
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">NavigationView</span> {
            <span class="type">ScrollView</span> {
                <span class="type">LazyVStack</span>(alignment: .<span class="dotAccess">center</span>, spacing: <span class="number">40</span>, pinnedViews: [.<span class="dotAccess">sectionHeaders</span>], content: {
                    <span class="type">ForEach</span>(<span class="number">0</span>...<span class="number">50</span>, id: \.<span class="keyword">self</span>) { count <span class="keyword">in</span>
                        <span class="type">Section</span>(header: stickyHeaderView) {
                            <span class="type">MyCell</span>()
                        }
                    }
                })
            }
        }
    }
}

<span class="keyword">struct</span> MyCell: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">Rectangle</span>()
                .<span class="call">fill</span>(<span class="type">Color</span>.<span class="property">red</span>)
                .<span class="call">frame</span>(width: <span class="number">100</span>, height: <span class="number">100</span>)
            <span class="type">HStack</span> {
                <span class="type">Image</span>(systemName: <span class="string">"heart"</span>)
                <span class="type">Text</span>(<span class="string">"WWDC 20"</span>)
                    .<span class="call">foregroundColor</span>(.<span class="dotAccess">blue</span>)
                    .<span class="call">font</span>(.<span class="dotAccess">headline</span>)
            }
            <span class="type">Text</span>(<span class="string">"PinnedScrollableViews"</span>)
                .<span class="call">foregroundColor</span>(.<span class="dotAccess">blue</span>)
                .<span class="call">font</span>(.<span class="dotAccess">subheadline</span>)
        }
    }
}
</code></pre><br /><p>The main point above in the code is <code>pinnedViews: [.sectionHeaders]</code> which is passed in the initializer of LazyVStack</p><p>It is also possible to make sticky footer by passing sectionFooters like [.sectionHeaders, .sectionFooters]</p><br /><p>Here is how it looks</p><img src="pinnedScrollableViews.gif "PinnedScrollableViews"" alt="PinnedScrollableViews"/><br /><p>Enjoy WWDC20</p>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/swiftui/computed-state</guid><title>Computed State in SwiftUI view</title><description>How to make a computed State in SwiftUI</description><link>https://yoswift.dev/swiftui/computed-state</link><pubDate>Tue, 16 Jun 2020 10:05:00 +0200</pubDate><content:encoded><![CDATA[<h1>Computed State in SwiftUI view</h1><p>In my App that I recently published to App store I wanted to let users control the sound. There are small sound effects on various user actions. The App is a Board game called <a href="https://en.wikipedia.org/wiki/Ludo_(board_game">Ludo</a>) where players take turns to roll dice and race their tokens. To make controls more granular I decided to have a separate toggles for dice roll and token move sound. As I thought users might only want to turn off these two frequent sounds and not all which are infrequent. So it was like implementing a master toggle to control everything and two other toggles that you can turn off/on individually</p><br /><p>Something like this</p><img src="master-toggle.gif "Master toggle"" alt="Master toggle"/><br /><p>Now it is not possible to implement it with three individual states (using @State) and passing their projected value (using $) to Toggle. The solution is easy but not something we usually do, so I figured it is worth sharing it in a short tip. Here is how I built it.</p><br /><pre><code><span class="keyword">struct</span> BindingDemo: <span class="type">View</span> {
    <span class="keyword">@State private var</span> sound: <span class="type">Bool</span> = <span class="keyword">true
    @State private var</span> moveSound: <span class="type">Bool</span> = <span class="keyword">true
    @State private var</span> diceSound: <span class="type">Bool</span> = <span class="keyword">true
    
    private var</span> soundBinding: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt; {
        <span class="type">Binding</span>(get: {
            <span class="keyword">self</span>.<span class="property">sound</span>
        }) {
            <span class="keyword">self</span>.<span class="property">sound</span> = $0
            <span class="keyword">self</span>.<span class="property">moveSound</span> = $0
            <span class="keyword">self</span>.<span class="property">diceSound</span> = $0
        }
    }

    <span class="keyword">private var</span> moveSoundBinding: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt; {
        <span class="type">Binding</span>(get: {
            <span class="keyword">self</span>.<span class="property">moveSound</span> &amp;&amp; <span class="keyword">self</span>.<span class="property">sound</span>
        }) {
            <span class="keyword">self</span>.<span class="property">moveSound</span> = $0
        }
    }
    <span class="keyword">private var</span> diceSoundBinding: <span class="type">Binding</span>&lt;<span class="type">Bool</span>&gt; {
        <span class="type">Binding</span>(get: {
            <span class="keyword">self</span>.<span class="property">diceSound</span> &amp;&amp; <span class="keyword">self</span>.<span class="property">sound</span>
        }) {
            <span class="keyword">self</span>.<span class="property">diceSound</span> = $0
        }
    }

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">Toggle</span>(isOn: soundBinding) {
                <span class="type">Text</span>(<span class="string">"Sound?"</span>)
            }
            <span class="type">Toggle</span>(isOn: moveSoundBinding) {
                <span class="type">Text</span>(<span class="string">"Move Sound?"</span>)
            }
            <span class="type">Toggle</span>(isOn: diceSoundBinding) {
                <span class="type">Text</span>(<span class="string">"Dice Sound?"</span>)
            }
        }
        .<span class="call">padding</span>()
    }
}
</code></pre><br /><p>Here is the <a href="https://apps.apple.com/us/app/ludo-a-strategy-board-game/id1518309340">link to my App</a> if you are curious. The App is available for iPhone, iPad and macOS. The app link takes you to the Mac or iOS App store depending on which platform you are in.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/swift/recursive_objects</guid><title>Recursive Objects</title><description>Value type cannot have a stored property that recursively contains it?</description><link>https://yoswift.dev/swift/recursive_objects</link><pubDate>Sat, 30 May 2020 03:48:00 +0200</pubDate><content:encoded><![CDATA[<h1>Recursive Objects</h1><p>Earlier we learnt about how we can <a href="https://yoswift.dev/swift/Tree%20in%20Swift/">implement a binary tree in Swift.</a> Remember we started with a Class and not a struct.</p><p>Let's try to understand the problem with using a struct. Try compiling the code below.</p><pre><code><span class="keyword">struct</span> Node {
    <span class="keyword">var</span> next: <span class="type">Node</span>
}
</code></pre><p>It will not compile and give you an error.</p><blockquote><p><strong>value type 'Node' cannot have a stored property that recursively contains it</strong></p></blockquote><p>The reason is, the compiler need to know the memory size of struct node so that it can allocate memory for variables / constants of this type in <a href="https://en.wikipedia.org/wiki/Stack-based_memory_allocation">Stack</a>. Now due to the recursive nature of the struct it means it is an infinite size and compiler cannot allow it.</p><p>Now, what do you think about the code below</p><pre><code><span class="keyword">struct</span> Node {
    <span class="keyword">var</span> next: [<span class="type">Node</span>]
}
</code></pre><p>Well, it compiles fine, which feels a bit weird to some, if you are confused by this go ahead and read the explanation below.</p><p>If you think about it <code>Array</code> in Swift is also a <em>value type</em> meaning compiler need to know the size of an Array in advance. But also the array need to hold <strong>variable</strong> number of elements which it cannot know in advance and hence it need to allocate memory for those elements in <a href="https://en.wikipedia.org/wiki/Memory_management">heap</a> and hold a reference (or pointer) to that memory.</p><p>The references are fixed size and so Array has a fixed size (size of a reference to actual array elements + other fixed size elements for book keeping and other implementation details.)</p><p>Now it is an Array's implementation detail that gives you value type semantic despite it containing a reference type. It does it <strong>lazily</strong> meaning copying only when required.</p><pre><code><span class="keyword">struct</span> Node {
    <span class="keyword">var</span> value: <span class="type">Int</span>
    <span class="keyword">var</span> kids: [<span class="type">Node</span>]
}

<span class="keyword">var</span> n1 = <span class="type">Node</span>(value: <span class="number">1</span>, kids: [ <span class="type">Node</span>(value: <span class="number">2</span>, kids: []) ])
<span class="keyword">var</span> n2 = n1
</code></pre><p>When we copy n1 to n2, we expect a <strong>new memory</strong> for kids array of n2 and all n1's array elements <strong>copied</strong> to it. This is because being a value type we expect a value type semantic from Array. Now to optimize unnecessary copy operations Array can actually delay this copy operation and hold until one of n1 or n2 try to mutate their kids array (e.g. remove or add a new element).</p><p>So far essentially it mean both reference inside n1 and n2 are actually pointing to the same memory location where the elements are stored.</p><pre><code>n2.<span class="property">kids</span>.<span class="call">append</span>(<span class="type">Node</span>(value: <span class="number">3</span>, kids: []))
</code></pre><p>Now at this point, Array implementation will actually allocate a new memory for holding kids of n2, add the new Node in that memory and change the reference inside n2 to point to this memory.</p><p>All these details are Array's internal implementation details but it is good to know what is going on inside to explain some concepts we get confused with while using an Array.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/combine/parallel-download-using-combine</guid><title>Multiple simultaneous network requests</title><description>Download multiple images using Combine</description><link>https://yoswift.dev/combine/parallel-download-using-combine</link><pubDate>Sat, 23 May 2020 01:25:00 +0200</pubDate><content:encoded><![CDATA[<h1>Multiple simultaneous network requests</h1><p>Today we will learn how to "combine" multiple publishers to create a new one. This has many use cases for example it can be used to download multiple images in parallel combining an existing Publisher which downloads an image from internet .</p><p>The sample App we will use to understand it, is a GridView of images where we want to download all images simultaneously before rendering</p><br /><img src="parallel-download-using-combine.gif "GridView"" alt="GridView"/><br /><br /><p>Let's set the stage first, we already have a method called <strong>fetchImage</strong> using <strong>URLSession's dataTaskPublisher</strong> to download an image from Internet. I am using this awesome site called <a href="https://picsum.photos/">Picsum Photos</a> to download a random picture from web of given size (in our example it is 80x80 points).</p><br /><pre><code><span class="keyword">private func</span> fetchImage() -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Image</span>, <span class="type">Never</span>&gt; {
        <span class="keyword">let</span> url = <span class="type">URL</span>(string: <span class="string">"https://picsum.photos/80"</span>)!
        <span class="keyword">return</span> <span class="type">URLSession</span>.<span class="property">shared</span>.<span class="call">dataTaskPublisher</span>(for: url)
            .<span class="call">map</span> {
                <span class="keyword">guard let</span> uiImage = <span class="type">UIImage</span>(data: $0.<span class="property">data</span>) <span class="keyword">else</span> {
                    <span class="keyword">return</span> <span class="type">Image</span>.<span class="property">default</span>
                }
                <span class="keyword">return</span> <span class="type">Image</span>(uiImage: uiImage)
        }
        .<span class="call">replaceError</span>(with: <span class="type">Image</span>.<span class="property">default</span>)
        .<span class="call">eraseToAnyPublisher</span>()
    }
<span class="keyword">extension</span> <span class="type">Image</span> {
    <span class="keyword">static var</span> `default` = <span class="type">Image</span>(systemName: <span class="string">"photo"</span>)
}
</code></pre><br /><p>Given this method, let's see how we can leverage this to achieve downloading multiple images in parallel. So without any delay let's see the code. All steps in the code are commented to explain what is going on.</p><br /><pre><code><span class="comment">// Download n images</span>
<span class="keyword">func</span> fetch(n: <span class="type">Int</span>) {
    <span class="comment">//Make an array of publishers</span> 
    <span class="keyword">let</span> arrayOfPublishers = (<span class="number">0</span>...n).<span class="call">map</span> { <span class="keyword">_ in</span>
        <span class="call">fetchImage</span>()
    }
    <span class="comment">//Create a publisher of a sequence</span>
    <span class="type">Publishers</span>.<span class="type">Sequence</span>(sequence: arrayOfPublishers)
        .<span class="dotAccess">flatMap</span>{ $0 } <span class="comment">//merges the output from all returned publishers into a single stream of Image.
  										//AnyPublisher&lt;Image, Never&gt; to Image</span>
        .<span class="call">collect</span>() <span class="comment">//collects all received items and returns them as an array upon completion.
                   //this is what collects all images and finishes when all are available</span> 
        .<span class="call">receive</span>(on: <span class="type">RunLoop</span>.<span class="property">main</span>) <span class="comment">// receive on main thread so that we can update our UI with images</span>
        .<span class="call">sink</span> { <span class="comment">//create a subscription, here the value we will receive is going to be [Image] 
            //we have all images $0, downloaded now</span> 
        }
        .<span class="call">store</span>(in: &amp;cancellableSet) <span class="comment">//so that we retain subscription</span>
}
</code></pre><p>The full code is available in this <a href="https://gist.github.com/manojkarki/75869a2bd7df5845f8d4c4fe70493a5d">Github gist</a></p><br /><p>If you have any questions, doubts or feedback <a href="https://yoswift.dev/about/about/">get in touch</a> and I would be happy to help.</p><br /><a href="https://twitter.com/intent/tweet?via=mskarki&amp;text=Download multiple images using Combine&amp;url=https%3A//yoswift.dev/combine/parallel-download-using-combine" rel="nofollow">Tweet this article</a>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/combine/advanced-swift-quiz</guid><title>Advanced Swift Quiz</title><description>Test your advanced Swift skills using Combine</description><link>https://yoswift.dev/combine/advanced-swift-quiz</link><pubDate>Sat, 16 May 2020 10:30:00 +0200</pubDate><content:encoded><![CDATA[<h1>Advanced Swift Quiz</h1><p>There are some Swift concepts which often surprise or confuse even very experienced programmers. Let's find out how good you are in understanding some of the advanced Swift skills by answering the quiz below using Combine.</p><p>Before starting if you want, take some time to read about <a href="https://developer.apple.com/documentation/combine/publisher">Publisher</a> and <a href="https://developer.apple.com/documentation/combine/just">Just</a> which are used in all problems you are about to see.</p><p>Now open a notebook to write down your answers and check in the end how many points you got and do not cheat 🤓</p><h2>Question 1</h2><pre><code><span class="comment">//Method 1</span>
<span class="keyword">func</span> patTtest() -&gt; <span class="type">Publisher</span> {
    <span class="type">Just</span>(<span class="number">9</span>)
}
</code></pre><p>Write down <strong>all</strong> the correct statements</p><ol><li>The code has "<em>missing return</em>" syntax error</li><li>The code has syntax error but not "<em>missing return</em>"</li><li>The code has no syntax error</li></ol><hr><h2>Question 2</h2><pre><code><span class="comment">//Method 2</span>
<span class="keyword">func</span> anyTest() -&gt; <span class="type">AnyPublisher</span>&lt;<span class="type">Int</span>, <span class="type">Never</span>&gt; {
    <span class="type">Just</span>(<span class="number">9</span>).<span class="call">eraseToAnyPublisher</span>()
}
<span class="keyword">let</span> p2 = <span class="call">anyTest</span>() <span class="comment">//line 1</span> 
p2.<span class="call">sink</span> { <span class="call">print</span>($0) } <span class="comment">//line 2</span>
<span class="keyword">let</span> p22: <span class="type">Just</span>&lt;<span class="type">Int</span>&gt; = <span class="call">anyTest</span>() <span class="comment">//line 3</span>
p22.<span class="call">sink</span> { <span class="call">print</span>($0) } <span class="comment">//line 4</span>
</code></pre><p>Write down <strong>all</strong> the correct statements</p><ol><li>The <strong>Line 1</strong> has syntax error</li><li>The <strong>Line 2</strong> has syntax error</li><li>The <strong>Line 3</strong> has syntax error</li><li>The method <code>anyTest</code> has syntax error</li><li><code>eraseToAnyPublisher</code> in method <code>anyTest</code> is not required.</li></ol><hr><h2>Question 3</h2><pre><code><span class="comment">//Method 3</span>
<span class="keyword">func</span> someTest() -&gt; <span class="keyword">some</span> <span class="type">Publisher</span> {
    <span class="type">Just</span>(<span class="number">9</span>)
}
<span class="keyword">let</span> p3 = <span class="call">someTest</span>() <span class="comment">//line 5</span>
p3.<span class="call">sink</span> { <span class="call">print</span>($0) } <span class="comment">//line 6</span>
<span class="keyword">let</span> p33: <span class="type">Just</span>&lt;<span class="type">Int</span>&gt; = <span class="call">someTest</span>() <span class="comment">//line 7</span>
</code></pre><p>Write down all the correct statements</p><ol><li>The method <code>someTest</code> has syntax error</li><li>Just can be a return type <code>some Publisher</code></li><li>The <strong>Line 5</strong> has syntax error</li><li>The <strong>Line 6</strong> has syntax error</li><li>The <strong>Line 7</strong> has syntax error</li><li>We can call <code>anyTest</code> of Q2 and <code>someTest</code> interchangeably.</li></ol><hr><h2>Question 4</h2><pre><code><span class="comment">//Method 4</span>
<span class="keyword">func</span> genericTest&lt;T: <span class="type">Publisher</span>&gt;() -&gt; <span class="type">T</span> <span class="keyword">where</span> <span class="type">T</span>.<span class="type">Output</span> == <span class="type">Int</span>, <span class="type">T</span>.<span class="type">Failure</span> == <span class="type">Never</span> {
    <span class="type">Just</span>(<span class="number">9</span>) <span class="keyword">as</span>! <span class="type">T</span>
}
<span class="keyword">let</span> p4 = <span class="call">genericTest</span>() <span class="comment">// line 8</span>
p4.<span class="call">sink</span> { <span class="call">print</span>($0) } <span class="comment">// line 9</span>

<span class="keyword">let</span> p44: <span class="type">Just</span>&lt;<span class="type">Int</span>&gt; = <span class="call">genericTest</span>() <span class="comment">// line 10</span>
p44.<span class="call">sink</span> { <span class="call">print</span>($0) } <span class="comment">// line 11</span>
</code></pre><p>Write down all the correct statements</p><ol><li>The method <code>genericTest</code> has syntax error</li><li><code>Just(9) as! T</code> the cast is not required</li><li><code>where T.Output == Int, T.Failure == Never</code> is incorrect syntax.</li><li>The <strong>Line 8</strong> has syntax error</li><li>The <strong>Line 10</strong> has syntax error</li><li>The <strong>Line 10</strong> is correct but <strong>line 11</strong> has syntax error</li><li>We can call <code>someTest</code> of Q3 and <code>genericTest</code> interchangeably.</li></ol><hr><h2>Check your Score</h2><details>
  <summary>Answer 1</summary>
  <br>
  <input type="checkbox" name="q1" value="q1" checked disabled>
  <label for="q1"> Only option 2 is correct</label>
  <h3>Hints</h3>
  <ul>
    <li>Publisher is a protocol with associatedtype (Output and Failure) so it cannot be used a a type.</li>
    <li><a href="https://docs.swift.org/swift-book/LanguageGuide/Generics.html">Read about protocols with Associated types</a></li>
  </ul>  
</details><br><br>

<details>
  <summary>Answer 2</summary>
  <br>
  <input type="checkbox" name="q2" value="q2" checked disabled>
  <label for="q2"> Only option 3 is correct.</label>
  <h3>Hints</h3>
  <ul>
    <li>The type of p22,  'Just&lt;Int&gt;' is not same as return type of method 'AnyPublisher&lt;Int, Never&gt;'</li>
    <li><a href="https://developer.apple.com/documentation/combine/anypublisher">Read about Publisher type</a></li>
    <li><a href="https://www.swiftbysundell.com/articles/different-flavors-of-type-erasure-in-swift/">Read about Any[Type] concept</a></li>
  </ul>
</details>

<br><br>

<details>
  <summary>Answer 3</summary>
  <br>
  <input type="checkbox" name="q3" value="q3" checked disabled>
  <label for="q3"> Option 4 and Option 5 are correct.</label>
  <h3>Hints</h3>
  <ul>
    <li>Check the type requirements for a subscriber to subscribe to a Publisher. The subscriber’s Input and Failure associated types must match the Output and Failure types declared by the publisher.</li>
    <li>'some Publisher' is not same as 'Just<Int>'</li>
    <li><a href="https://stackoverflow.com/questions/56433665/what-is-the-some-keyword-in-swiftui">Check out various answers in this SO post</a></li>
    <li><a href="https://github.com/apple/swift-evolution/blob/master/proposals/0244-opaque-result-types.md">Proposal about opaque return types</a></li>
    <li><a href="https://www.donnywals.com/understanding-type-erasure-in-swift/">Donny Wals explaining "some" concepts here</a></li>    
  </ul>
  </details>

<br><br>

<details>
  <summary>Answer 4</summary>
  <br>
  <input type="checkbox" name="q4" value="q4" checked disabled>
  <label for="q4"> Only option 4 is correct.</label>
  <h3>Hints</h3>
  <ul>
    <li>Compiler cannot infer the Generic parameter 'T' unless you explicitly declare type of p4.</li>
    <li><a href="https://docs.swift.org/swift-book/LanguageGuide/Generics.html">Read about Generics</a></li>    
  </ul>
</details>

<br>
<h2>Reward yourself 25 points for each correct answer.</h2>
<h3>Don't be shy and <a href="https://twitter.com/intent/tweet?via=mskarki&amp;text=Yo!, my score in advanced Swift quiz is [ ]&amp;url=https%3A//yoswift.dev/combine/advanced-swift-quiz" rel="nofollow">share your score</h3></a>

]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/swift/Tree%20in%20Swift</guid><title>Tree in Swift</title><description>How to represent Tree data structure in Swift</description><link>https://yoswift.dev/swift/Tree%20in%20Swift</link><pubDate>Sun, 10 May 2020 11:32:00 +0200</pubDate><content:encoded><![CDATA[<h1>Tree in Swift</h1><p>Tree data structure is something I am sure every programmer has implemented at least once (though more for interviews than in job 😁). Nevertheless let's see how to represent a binary tree in Swift.</p><p>A <strong>binary tree</strong> is a specific form of tree data structure where each node has at most two children which are referred to as the <em>left child</em> and the <em>right child</em>. [<a href="https://en.wikipedia.org/wiki/Binary_tree">Ref</a>]</p><p>You probably figured out from the definition that left and right children are itself Trees, so let's start with a class which is a Ref type (with a value type like structure we cannot represent a Tree, which means an infinite size memory)</p><pre><code><span class="keyword">class</span> TreeClass&lt;T&gt; {
    <span class="keyword">var</span> data: <span class="type">T</span>
    <span class="keyword">var</span> left: <span class="type">TreeClass</span>&lt;<span class="type">T</span>&gt;?
    <span class="keyword">var</span> right: <span class="type">TreeClass</span>&lt;<span class="type">T</span>&gt;?

    <span class="keyword">init</span>(data: <span class="type">T</span>, left: <span class="type">TreeClass</span>&lt;<span class="type">T</span>&gt;?, right: <span class="type">TreeClass</span>&lt;<span class="type">T</span>&gt;?) {
        <span class="keyword">self</span>.<span class="property">data</span> = data
        <span class="keyword">self</span>.<span class="property">left</span> = left
        <span class="keyword">self</span>.<span class="property">right</span> = right
    }
}
</code></pre><p>Now represent a tree with root (3) left child (1) and right child (2)</p><pre><code><span class="keyword">let</span> tree11 = <span class="type">TreeC</span>(data: <span class="number">1</span>, left: <span class="keyword">nil</span>, right: <span class="keyword">nil</span>)
<span class="keyword">let</span> tree22 = <span class="type">TreeC</span>(data: <span class="number">2</span>, left: <span class="keyword">nil</span>, right: <span class="keyword">nil</span>)
<span class="keyword">let</span> tree33 = <span class="type">TreeC</span>(data: <span class="number">3</span>, left: tree11, right: tree22)
</code></pre><p>Let's write a <a href="https://en.wikipedia.org/wiki/Tree_traversal">preorder traversal</a> algorithm</p><pre><code><span class="keyword">func</span> preorder&lt;T&gt;(tree: <span class="type">TreeC</span>&lt;<span class="type">T</span>&gt;?) {
    <span class="keyword">guard let</span> t = tree <span class="keyword">else</span> {
        <span class="keyword">return</span>
    }
    <span class="call">print</span>(t.<span class="property">data</span>)
    <span class="call">preorder</span>(tree: t.<span class="property">left</span>)
    <span class="call">preorder</span>(tree: t.<span class="property">right</span>)
}
</code></pre><p>In Swift there is another (better) way to represent recursive data structures like Tree and that is called <em>Indirect enum</em></p><p>With it an enum case can refer to itself which essentially is possible as compiler internally make it like a reference type. (for normal enums which are value type, internally compiler treat them as C unions )</p><pre><code><span class="keyword">indirect enum</span> Tree&lt;T&gt; {
  <span class="keyword">case</span> <span class="type">Nil</span>
  <span class="keyword">case</span> <span class="type">Node</span>(value: <span class="type">T</span> ,left: <span class="type">Tree</span>&lt;<span class="type">T</span>&gt; ,right: <span class="type">Tree</span>&lt;<span class="type">T</span>&gt;)
}
</code></pre><p>Much better, right?</p><p>Same tree representation</p><pre><code><span class="keyword">let</span> tree1 = <span class="type">Tree</span>.<span class="type">Node</span>(value: <span class="number">1</span>, left: <span class="type">Tree</span>.<span class="type">Nil</span>, right: <span class="type">Tree</span>.<span class="type">Nil</span>)
<span class="keyword">let</span> tree2 = <span class="type">Tree</span>.<span class="type">Node</span>(value: <span class="number">2</span>, left: <span class="type">Tree</span>.<span class="type">Nil</span>, right: <span class="type">Tree</span>.<span class="type">Nil</span>)
<span class="keyword">let</span> tree3 = <span class="type">Tree</span>.<span class="type">Node</span>(value: <span class="number">3</span>, left: tree1, right: tree2)
</code></pre><p>And preorder algorithm</p><pre><code><span class="keyword">func</span> preorder&lt;T&gt;(tree:<span class="type">Tree</span>&lt;<span class="type">T</span>&gt;) {
    <span class="keyword">switch</span> tree {
    <span class="keyword">case</span> .<span class="dotAccess">Nil</span>:
        <span class="keyword">break</span>;
    <span class="keyword">case</span> .<span class="dotAccess">Node</span>(<span class="keyword">let</span> value, <span class="keyword">let</span> left, <span class="keyword">let</span> right):
        <span class="call">print</span>(value)
        <span class="call">preorder</span>(tree: left)
        <span class="call">preorder</span>(tree: right)
    }
}
</code></pre><p>Swift is evolving very fast and has so many features that sometime we miss to use the best feature available for a given problem.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/swiftui/swiftui-twitter-basics</guid><title>My Twitter SwiftUI collection</title><description>Some SwiftUI stuff I shared in 2019 using the beta release.</description><link>https://yoswift.dev/swiftui/swiftui-twitter-basics</link><pubDate>Tue, 5 May 2020 09:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>My Twitter SwiftUI collection</h1><p>SwiftUI completly changed the way developers used to create software for Apple platforms. Here are some tips I shared in 2019 on my Twitter when SwiftUI was in beta.<br><br><br /></p><ul><li>Learn about <a href="https://twitter.com/mskarki/status/1150477598281084929" target="_blank">SequenceGesture</a> and how to use it.</li></ul><ul><li>Do you like playing cards? Here is a nice <a href="https://twitter.com/mskarki/status/1150478984037261313" target="_blank">card deck animation</a>.</li></ul><ul><li>A <a href="https://twitter.com/mskarki/status/1150479713418305536" target="_blank">flip animation</a> using ZStack. Now imagine doing it in UIKit 😀</li></ul><ul><li>Who have not seen a hamburger button, here is an <a href="https://twitter.com/mskarki/status/1151210494759489536" target="_blank">animating one</a>.</li></ul><ul><li>And the <a href="https://twitter.com/mskarki/status/1151210579010478081" target="_blank">side menu</a>.</li></ul><ul><li>This <a href="https://twitter.com/mskarki/status/1151220584921128961" target="_blank">stack of images</a>, a fun way to browse items.</li></ul><ul><li>What is <a href="https://twitter.com/mskarki/status/1151544806885199872" target="_blank">Color.red</a>, yes like almost everything it is also a View in SwiftUI.</li></ul><ul><li>Isn't UIActivityIndicatorView is boring? How about these <a href="https://twitter.com/mskarki/status/1151980365743034370" target="_blank">spinners</a>.</li></ul><ul><li>And finally <a href="https://twitter.com/mskarki/status/1152304358563954688" target="_blank">what are ViewModifiers and why their order is important</a>?</li></ul><br /><p>Follow me on <a href="https://twitter.com/mskarki" target="_blank">Twitter</a> for short tips like these</p>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/swiftui/statusbar-style</guid><title>SwiftUI View and status bar style</title><description>How to change status bar style for each SwiftUI screen or View</description><link>https://yoswift.dev/swiftui/statusbar-style</link><pubDate>Sun, 3 May 2020 15:00:00 +0200</pubDate><content:encoded><![CDATA[<h1>SwiftUI View and status bar style</h1><p>In UIKit we can override preferredStatusBarStyle to change the status bar style.</p><br /><pre><code><span class="keyword">class</span> MyViewController: <span class="type">UIViewController</span> {
    <span class="keyword">override var</span> preferredStatusBarStyle: <span class="type">UIStatusBarStyle</span> {
        <span class="keyword">return</span> .<span class="dotAccess">lightContent</span>
    }
}
</code></pre><br /><p>Now when you push another SwiftUI View to NavigationView, there is no way to change the status bar style for the screen you are pushing.</p><br /><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">HStack</span> {
        <span class="type">NavigationLink</span>(destination: <span class="type">AnotherScreenView</span>()) {
            <span class="type">Text</span>(<span class="string">"Push another screen"</span>)                
        }        
    }
}
</code></pre><br /><p>A small trick is to always create a new instance of UIHostingController and change statusbar as required.</p><br /><br /><p>First create a subclass of UIHostingController that takes statusBarStyle.</p><br /><pre><code><span class="keyword">class</span> HostingController: <span class="type">UIHostingController</span>&lt;<span class="type">AnyView</span>&gt; {

    <span class="keyword">var</span> statusBarStyle: <span class="type">UIStatusBarStyle</span>

    <span class="keyword">init</span>(rootView: <span class="type">AnyView</span>, statusBarStyle : <span class="type">UIStatusBarStyle</span> = .<span class="dotAccess">lightContent</span>) {
        <span class="keyword">self</span>.<span class="property">statusBarStyle</span> = statusBarStyle
        <span class="keyword">super</span>.<span class="keyword">init</span>(rootView: rootView)
    }

    <span class="keyword">override var</span> preferredStatusBarStyle: <span class="type">UIStatusBarStyle</span> {
        statusBarStyle
    }
}
</code></pre><br /><p>A small router that holds the UINavigationController, and injected to view hierarchy as an environment object of root view. The only method is push taking a root view and statusBarStyle.</p><br /><pre><code><span class="keyword">class</span> Router: <span class="type">ObservableObject</span> {
    <span class="keyword">let</span> navigationController: <span class="type">UINavigationController</span>
    
    <span class="keyword">init</span>(navigationController: <span class="type">UINavigationController</span>) {
        <span class="keyword">self</span>.<span class="property">navigationController</span> = navigationController
    }
    
    <span class="keyword">func</span> push(<span class="keyword">_</span> view: <span class="type">AnyView</span>, statusBarStyle : <span class="type">UIStatusBarStyle</span> = .<span class="dotAccess">lightContent</span>) {
        <span class="keyword">let</span> hostingController =  <span class="type">HostingController</span>(rootView: view, statusBarStyle: statusBarStyle:)
        <span class="keyword">self</span>.<span class="property">navigationController</span>.<span class="call">pushViewController</span>(hostingController, animated: <span class="keyword">true</span>)
    }
}

</code></pre><br /><p>Make a small replacement for SwiftUI's NavigationLink.</p><br /><pre><code><span class="keyword">struct</span> MyNavigationLink&lt;Destination: <span class="type">View</span>, Content: <span class="type">View</span>&gt;: <span class="type">View</span> {
    <span class="keyword">@EnvironmentObject 
    var</span> router: <span class="type">Router</span>
    <span class="keyword">let</span> destination: <span class="type">Destination</span>

    <span class="keyword">let</span> viewBuilder: () -&gt; <span class="type">Content</span>
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Button</span>(action: {        
        <span class="keyword">self</span>.<span class="property">router</span>.<span class="call">push</span>(<span class="type">AnyView</span>(<span class="keyword">self</span>.<span class="property">destination</span>), statusBarStyle: .<span class="dotAccess">lightContent</span>)
        }) {
            <span class="call">viewBuilder</span>()
        }
    }
}
</code></pre><br /><p>Now usage is simple</p><br /><pre><code><span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
    <span class="type">HStack</span> {
    <span class="type">MyNavigationLink</span>(destination: <span class="type">AnotherScreenView</span>(), statusBarStyle: .<span class="dotAccess">darkContent</span>) {
            <span class="type">Text</span>(<span class="string">"Push another screen"</span>)                
        }        
    }
}
</code></pre><br />]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/swiftui/swiftui-conditional-view</guid><title>Conditionally render a different View</title><description>How to conditionally render a different View</description><link>https://yoswift.dev/swiftui/swiftui-conditional-view</link><pubDate>Sun, 3 May 2020 12:35:00 +0200</pubDate><content:encoded><![CDATA[<h1>Conditionally render a different View</h1><p>Well, most of the SwiftUI beginner do try this which compiler won't compile</p><br /><pre><code><span class="keyword">func</span> textOrImage(<span class="keyword">_</span> text: <span class="type">Bool</span>) -&gt; <span class="keyword">some</span> <span class="type">View</span> {
    text ? <span class="type">Text</span>(<span class="string">"Hello"</span>) : <span class="type">Image</span>(systemName: <span class="string">"headphones"</span>)
}
</code></pre><br /><p>If you don't understand why, read about <a href="https://docs.swift.org/swift-book/LanguageGuide/OpaqueTypes.html"><code></code><code>some</code><code></code></a> keyword,</p><p>in short it is a shorthand to avoid writing long generic types but still compiler will check that function returns the same concrete type from all return paths.</p><br /><p>Also don't even try to do this</p><pre><code><span class="keyword">func</span> textOrImage(<span class="keyword">_</span> text: <span class="type">Bool</span>) -&gt; <span class="type">Group</span> {
    text ? <span class="type">Group</span> { <span class="type">Text</span>(<span class="string">"Hello"</span>) } : <span class="type">Group</span> { <span class="type">Image</span>(systemName: <span class="string">"headphones"</span>) }
}
</code></pre><br /><p>Group is a generic so a concrete type is <code></code><code>Group&lt;Text&gt;</code><code></code> or <code></code><code>Group&lt;Image&gt;</code><code></code>, but you can't return both.</p><br /><p>Type erased view <a href="https://developer.apple.com/documentation/swiftui/anyview">AnyView</a> can be used here.</p><pre><code><span class="keyword">func</span> textOrImage(<span class="keyword">_</span> text: <span class="type">Bool</span>) -&gt; <span class="type">AnyView</span> {
    text ? <span class="type">AnyView</span>(<span class="type">Text</span>(<span class="string">"Hello"</span>)) : <span class="type">AnyView</span>(<span class="type">Image</span>(systemName: <span class="string">"headphones"</span>))
}
</code></pre><br /><p>But important to note this from the documentation.</p><p><em>"Whenever the type of view used with an AnyView changes, the old hierarchy is destroyed and a new hierarchy is created for the new type."</em></p><br /><p>One implication of this is that, as SwiftUI system need to discard the whole view hierarchy, in some case it mess with the animation (more on it later).</p><br /><p>Another way is to do something like this</p><pre><code><span class="keyword">func</span> textOrNil(<span class="keyword">_</span> text: <span class="type">Bool</span>) -&gt; <span class="type">Text</span>? {
    <span class="keyword">guard</span> text <span class="keyword">else</span> { <span class="keyword">return nil</span> }
    <span class="keyword">return</span> <span class="type">Text</span>(<span class="string">"Hello"</span>)
}

<span class="keyword">func</span> imageOrNil(<span class="keyword">_</span> text: <span class="type">Bool</span>) -&gt; <span class="type">Image</span>? {
    <span class="keyword">guard</span> text <span class="keyword">else</span> { <span class="keyword">return</span> <span class="type">Image</span>(systemName: <span class="string">"headphones"</span>) }
    <span class="keyword">return nil</span>
}
</code></pre><br /><p>It is perfectly fine to then use these methods like below</p><pre><code><span class="keyword">var</span> isText: <span class="type">Bool
VStack</span> {
    <span class="call">textOrNil</span>(isText)
    <span class="call">imageOrNil</span>(isText)
}

<span class="comment">//which is same as writing</span>
<span class="type">VStack</span> {
    <span class="type">ViewBuilder</span>.<span class="call">buildIf</span>(<span class="call">textOrNil</span>(isText))
    <span class="type">ViewBuilder</span>.<span class="call">buildIf</span>(<span class="call">imageOrNil</span>(isText))
}

</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/swift/readonly-property</guid><title>Readonly properties</title><description>Readonly properties with auto- synthesized intializers.</description><link>https://yoswift.dev/swift/readonly-property</link><pubDate>Sat, 2 May 2020 12:35:00 +0200</pubDate><content:encoded><![CDATA[<h1>Readonly properties</h1><p>In a struct you can mark a property readonly like</p><pre><code><span class="keyword">struct</span> Example1 {
    <span class="keyword">private(set) var</span> value: <span class="type">Int</span>
}
</code></pre><p>This is another way of marking a property readonly</p><pre><code><span class="keyword">struct</span> Example2 {
    <span class="keyword">let</span> value: <span class="type">Int</span>
}
</code></pre><p>There is an important difference though, the below code will compile just fine</p><pre><code><span class="keyword">var</span> example1 = <span class="type">Example</span>(value: <span class="number">10</span>)
example1.<span class="property">value</span> = <span class="number">20</span>
</code></pre><p>while below code will not compile with <span style="color:red"> error: cannot assign to property: 'value' is a 'let' constant </span></p><pre><code><span class="keyword">var</span> example2 = <span class="type">Example2</span>(value: <span class="number">10</span>)
example2.<span class="property">value</span> = <span class="number">20</span>
</code></pre><p>and by using private(set) you can provide a default value to your property, and initializer can be called</p><p>with or without an argument.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/combine/keyboard-height</guid><title>Keyboard handling using combine</title><description>Reactive way to handle keyboard height change</description><link>https://yoswift.dev/combine/keyboard-height</link><pubDate>Sat, 2 May 2020 12:35:00 +0200</pubDate><content:encoded><![CDATA[<h1>Keyboard handling using combine</h1><pre><code><span class="keyword">static var</span> keyboardHeightPublisher: <span class="type">AnyPublisher</span>&lt;<span class="type">CGFloat</span>, <span class="type">Never</span>&gt; {
    <span class="keyword">let</span> willShow = <span class="type">NotificationCenter</span>.<span class="property">default</span>.<span class="call">publisher</span>(for: <span class="type">UIApplication</span>.<span class="property">keyboardWillShowNotification</span>)
        .<span class="call">map</span> { $0.(userInfo?[<span class="type">UIResponder</span>.<span class="property">keyboardFrameEndUserInfoKey</span>] <span class="keyword">as</span>? <span class="type">CGRect</span>)?.<span class="property">height</span> ?? <span class="number">0</span> }

    <span class="keyword">let</span> willHide = <span class="type">NotificationCenter</span>.<span class="property">default</span>.<span class="call">publisher</span>(for: <span class="type">UIApplication</span>.<span class="property">keyboardWillHideNotification</span>)
        .<span class="call">map</span> { <span class="keyword">_ in</span> <span class="type">CGFloat</span>(<span class="number">0</span>) }

    <span class="keyword">return</span> <span class="type">MergeMany</span>(willShow, willHide)
        .<span class="call">eraseToAnyPublisher</span>()
}
</code></pre><p>Now you can subscribe easily to keyboard height changes.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    
    <span class="keyword">@State 
    private var</span> value: <span class="type">String</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">TextField</span>(<span class="string">"Enter the value"</span>, text: $value)
            .<span class="call">onReceive</span>(keyboardHeightPublisher) { keyboardHeight <span class="keyword">in
                if</span> keyboardHeight &gt; <span class="number">0</span> {
                    <span class="call">print</span>(<span class="string">"Move something up"</span>)
                }
            }
    }
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://yoswift.dev/swiftui/swiftui-with-uilabel</guid><title>Using UILabel in SwiftUI</title><description>How to use a multiline UILabel in SwiftUI.</description><link>https://yoswift.dev/swiftui/swiftui-with-uilabel</link><pubDate>Sat, 2 May 2020 12:35:00 +0200</pubDate><content:encoded><![CDATA[<h1>Using UILabel in SwiftUI</h1><p>But why 😀 well sometime using SwiftUI in an existing App force you to do so.</p><p>So here is a SwiftUI View using <code></code><code>Text</code><code></code></p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">Text</span>(<span class="string">"This is a SwiftUI text which is easy to use but you need to understand the SwiftUI layout engine."</span>)
                .<span class="call">background</span>(<span class="type">Color</span>.<span class="property">black</span>)
                .<span class="call">foregroundColor</span>(<span class="type">Color</span>.<span class="property">white</span>)
        }
        .<span class="call">frame</span>(width: <span class="number">200</span>)
    }
}
</code></pre><p>Because <code></code><code>Text</code><code></code> has no frame, it gets it width from the parent which is a VStack and you see a nice multiline text constrained</p><p>by width of the parent 200 pts.</p><br /><img src="swiftui-with-uilabel-1.png "Multiline Text in SwiftUI"" alt="Multiline Text in SwiftUI"/><br /><br /><p>To use UILabel and produce the similar output this is what we need.</p><pre><code><span class="keyword">struct</span> SUILabel: <span class="type">UIViewRepresentable</span> {

    <span class="keyword">private(set) var</span> preferredMaxLayoutWidth: <span class="type">CGFloat</span> = <span class="number">0</span>
    <span class="keyword">func</span> makeUIView(context: <span class="type">UIViewRepresentableContext</span>&lt;<span class="type">SUILabel</span>&gt;) -&gt; <span class="type">UILabel</span> {
        <span class="keyword">let</span> label = <span class="type">UILabel</span>()
        label.<span class="property">text</span> = <span class="string">"""
        This is UILabel, one of the most interesting View class in UIKit. 
        With autolayout and multiline and it often give you some surprises. 
        Now using it with SwiftUI = 🤯
        """</span>
        label.<span class="property">numberOfLines</span> = <span class="number">0</span>
        label.<span class="property">preferredMaxLayoutWidth</span> = preferredMaxLayoutWidth
        label.<span class="property">backgroundColor</span> = <span class="type">UIColor</span>.<span class="property">black</span>
        label.<span class="property">textColor</span> = <span class="type">UIColor</span>.<span class="property">white</span>
        <span class="keyword">return</span> label
    }

    <span class="keyword">func</span> updateUIView(<span class="keyword">_</span> uiView: <span class="type">UILabel</span>, context: <span class="type">UIViewRepresentableContext</span>&lt;<span class="type">SUILabel</span>&gt;) { }
}
</code></pre><p>Using SUILabel in SwiftUI view</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">GeometryReader</span> { geometry <span class="keyword">in</span>
                <span class="type">SUILabel</span>(preferredMaxLayoutWidth: geometry.<span class="property">size</span>.<span class="property">width</span>)
                .<span class="call">fixedSize</span>(horizontal: <span class="keyword">true</span>, vertical: <span class="keyword">true</span>)
            }
        }
        .<span class="call">frame</span>(width: <span class="number">200</span>)
    }
}
</code></pre><p>The important things to note are, the use of <a href="https://developer.apple.com/documentation/uikit/uilabel/1620534-preferredmaxlayoutwidth"><strong>preferredMaxLayoutWidth</strong></a> onUILabel, <a href="https://developer.apple.com/documentation/swiftui/geometryreader"><strong>GeometryReader</strong></a> to fed it to SUILabel and using <a href="https://developer.apple.com/documentation/swiftui/group/3284808-fixedsize"><strong>fixedSize</strong></a> on SUILabel to force SwiftUIlayout engine to use the original size ( in UIKit words, <a href="https://developer.apple.com/documentation/uikit/uiview/1622600-intrinsiccontentsize">intrinsic content size</a>)</p>]]></content:encoded></item></channel></rss>